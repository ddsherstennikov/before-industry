(SETQQ CONS1 (LAMBDA(E L)
(COND
((ATOM L) (LIST	E L) )
(T (CONS E L) )
)))


(SETQQ BEGIN(LAMBDA(L)
(COND
((NULL(CDR L)) NIL)
(T (CONS (CAR L) (BEGIN	(CDR L)) ) )
)))


(SETQQ OUT (LAMBDA (L)
(COND
((NULL L) )
(T (PRINT (CAR L))
	  (OUT (CDR L)))
)
)
)


(SETQQ REVOUT(LAMBDA(L)
(COND
((NULL L) NIL)
(T (REVOUT (CDR	L))
   (PRINT (CAR L)))
)
)
)


(SETQQ APPEND(LAMBDA(L R)
(COND
((NULL L) R)
(T (CONS (CAR L) (APPEND (CDR L) R) ))
)
)
)


(SETQQ LAST(LAMBDA(L)
(COND
((NULL (CDR L))	(CAR L))
(T (LAST (CDR L)) )
)))


(SETQQ REVERSE(LAMBDA(L)
(COND
((NULL L) NIL)
(T (CONS (LAST L) (REVERSE(BEGIN L)) ))
)
		       )
)

(SETQQ LEN(LAMBDA(L)
(COND
((NULL L) 0)
(T (PLUS 1 (LEN	(CDR L))))
)))

(SETQQ COUNTATOM(LAMBDA(L)
(COND
((NULL L) 0)
((ATOM (CAR L))	(PLUS 1	(COUNTATOM (CDR	L))))
(T (COUNTATOM (CDR L)))
)))

(SETQQ ONLYATOM(LAMBDA(L)
(COND
((NULL L) NIL)
((ATOM (CAR L))	(CONS (CAR L) (ONLYATOM	(CDR L))))
(T (ONLYATOM (CDR L)))
)))

(SETQQ DEPTH(LAMBDA(L)
(COND
((NULL L) 1)
((ATOM (CAR L))	(DEPTH(CDR L)))
(T (PLUS 1 (MAX	(DEPTH (CDR L))	(DEPTH (CAR L)))))
)))

(SETQQ INSORT(LAMBDA(E L)
(COND
((NULL L) (CONS	E NIL))
((LESSP	E (CAR L)) (CONS E L))
(T (CONS (CAR L) (INSORT E (CDR	L))))
)))

(SETQQ SORT(LAMBDA(L)
(COND
((NULL(CDR L)) L)
(T (INSORT (CAR	L) (SORT (CDR L)) ) )
)))

(SETQQ MERGE(LAMBDA(L R)
(COND
((NULL (CDR L))	(INSORT	(CAR L)	R))
(T (MERGE (CDR L) (INSORT (CAR L) R) ) )
)))

(SETQQ MAXLIST(LAMBDA(L)
(COND
( (NULL	(CDR L)) (CAR L) )
(T (MAX	(CAR L)	(MAXLIST (CDR L)) ))
)))

(SETQQ SUMMA(LAMBDA(L)
(COND
( (NULL	(CDR L)) (CAR L) )
(T (PLUS (CAR L) (SUMMA	(CDR L)) ) )
)))

(SETQQ ONION(LAMBDA(N)
(COND
((EQ N 1) (CONS	1 NIL))
(T (CONS (ONION(DIFFERENCE N 1)) NIL) )
)))

(SETQQ MEMBER(LAMBDA(E L)
(COND
((NULL L) NIL)
((EQ (CAR L) E)	T)
(T (MEMBER E (CDR L)))
)))

(SETQQ REMOVE(LAMBDA(E L)
(COND
((NULL L) NIL)
((EQ (CAR L) E)	(REMOVE	E (CDR L)))
(T (CONS (CAR L) (REMOVE E (CDR	L))))
)))

(SETQQ INSET(LAMBDA(L)
(COND
((NULL L) NIL)
((MEMBER (CAR L) (CDR L)) (INSET (CDR L)) )
(T (CONS (CAR L) (INSET	(CDR L))))
)))

(SETQQ EQSET(LAMBDA(L R)
(COND
( (AND (NULL L)	(NULL R)) T)
( (NULL	L) NIL)
( (AND (MEMBER (CAR L) R) (EQSET (CDR L) (REMOVE (CAR L) R) ) )	T)
(T NIL)
)))

(SETQQ CROSS(LAMBDA(L R)
(COND
((NULL L) NIL)
((NULL R) NIL)
((MEMBER (CAR L) R) (CONS (CAR L) (CROSS (CDR L) R) ) )
(T (CROSS (CDR L) R))
)))

(SETQQ UNION(LAMBDA(L R)
(COND
((NULL L) R)
((MEMBER (CAR L) R) (UNION (CDR	L) R))
(T (CONS (CAR L) (UNION	(CDR L)	R) ))
)))

(SETQQ SUBSET(LAMBDA(L R)
(COND
((NULL L) T)
((MEMBER (CAR L) R) (SUBSET (CDR L) R))
(T NIL)
)))

%R-L%

(SETQQ DIF(LAMBDA(L R)
(COND
((NULL L) R)
((MEMBER (CAR L) R) (DIF (CDR L) (REMOVE (CAR L) R)))
(T (DIF	(CDR L)	R))
)))

%(R-L)+(R-L)%
(SETQQ SIMDIF(LAMBDA(L R)
(COND
(T (UNION (DIF L R) (DIF R L)) )
)))

(SETQQ OKV(LAMBDA(L N)
(COND
((NULL L) NIL)
(T (CONS (CONS1	N (CAR L)) (OKV	(CDR L)	N) ) )
)))

(SETQQ VSEPOD(LAMBDA(L)
(COND
((NULL L) (LIST	NIL))
(T (APPEND (VSEPOD (CDR	L)) (OKV (VSEPOD (CDR L)) (CAR L)) ) )
)))

%VSE K-ELEMENTNIE PODMNOJ. L%

(SETQQ VSEKA (LAMBDA (L	K)
(COND
((EQ K 0) (LIST	NIL))
((EQ K (LEN L))	(LIST L))
(T (APPEND (VSEKA (CDR L) K)
(OKV (VSEKA (CDR L) (DIFFERENCE	K 1)) (CAR L)) ))
)))

(SETQQ NAVSEMESTA(LAMBDA(E L)
(COND
((NULL L) (CONS	E NIL))
(T (APPEND (LIST (CONS E L)) (OKV (NAVSEMESTA E	(CDR L)	) (CAR L) ) )	  )
)))

(SETQQ STAN(LAMBDA(L)
(COND
((EQ (LEN L) 1)	L)
((EQ (LEN (CDR L)) 1) (NAVS (CAR L) (LIST (CDR L))) )
(T (NAVS (CAR L) (STAN (CDR L))	) )
)))

(SETQQ NAVS(LAMBDA(E L)
(COND
((NULL	L) NIL)
(T (APPEND (NAVSEMESTA E (CAR L)) (NAVS	E (CDR L)) ) )
)))

(SETQQ ALLCAR(LAMBDA(L)
(COND
((NULL L) NIL)
(T (CONS (CAAR L) (ALLCAR (CDR L)) ) )
)))

(SETQQ ALLCDR(LAMBDA(L)
(COND
((NULL L) NIL)
(T (CONS (CDAR L) (ALLCDR (CDR L)))))))

(SETQQ TRANS(LAMBDA(L)
(COND
((NULL L) NIL)
((NULL (CAR L))	NIL)
(T (APPEND (LIST (ALLCAR L)) (TRANS (ALLCDR L))	) )
)))

(SETQQ AST (LAMBDA(L K)
(COND
((NULL L))
(T (CONS (TIMES	(CAR L)	K) (AST	(CDR L)	K)))
)))

(SETQQ MNO (LAMBDA(L K)
(COND
((NULL L))
(T (APPEND (LIST (AST (CAR L) K)) (MNO (CDR L) K)))
)))

(SETQQ SPSUM(LAMBDA(L R)
(COND
((NULL L) R)
(T (CONS (PLUS (CAR L) (CAR R))	(SPSUM (CDR L) (CDR R))	) )
)))

(SETQQ SUM (LAMBDA(A B)
(COND
((NULL A))
(T (CONS (SPSUM	(CAR A)	(CAR B)) (SUM (CDR A) (CDR B))	) )
)))

(SETQQ SPMNO(LAMBDA(L R)
(COND
((NULL L) 0)
(T (PLUS (TIMES	(CAR L)	(CAR R)) (SPMNO	(CDR L)	(CDR R)) ) )
)))

(SETQQ STRMNO(LAMBDA(L R)
(COND
( (NULL	(CAR R)) )
(T (APPEND (LIST (SPMNO	L (ALLCAR R)) )	(STRMNO	L (ALLCDR R)) ))
)))

(SETQQ MNO(LAMBDA(L R)
(COND
((NULL L))
(T (APPEND (LIST (STRMNO (CAR L) R)) (MNO (CDR L) R) ) )
)))

(SETQQ REM(LAMBDA(I L)
(COND
((EQ I 1) (CDR L))
(T ( CONS (CAR L) (REM (DIFFERENCE I 1)	(CDR L)) ) )
)))

(SETQQ REMSP(LAMBDA(I L)
(COND
((NULL L) L)
(T ( CONS (REM I (CAR L)) (REMSP I (CDR	L)) )	)
)))

(SETQQ FUN(LAMBDA(L I J)
(COND
((EQ J 1) (REMSP I (CDR	L)) )
(T ( CONS (REM I (CAR L)) (FUN (CDR L) I (DIFFERENCE J 1) ) )  )
)))

(SETQQ ST(LAMBDA(A N)
(COND
((EQ N 1) A)
(T (TIMES A (ST	A (DIFFERENCE N	1)) ) )
)))

(SETQQ SUMMON(LAMBDA(L ORIG)
(COND
( (NULL	(CDR L)) (TIMES	(CAR L)	(OPR (FUN ORIG 1 1))) )
(T (PLUS (TIMES	(LAST L) (ST -1	(PLUS 1	(LEN L)) ) (OPR	(FUN ORIG (LEN L) 1)) )	(SUMMON	(BEGIN L) ORIG)	)   )
)))

(SETQQ OPR(LAMBDA(L)
(COND
((EQ (LEN L) 2)	(DIFFERENCE (TIMES (CAAR L) (CADR (CADR	L)) ) (TIMES (CAR (CDAR	L)) (CAR(CADR L))) ) )
(T (SUMMON (CAR	L) L) )
)))
INT 1))



